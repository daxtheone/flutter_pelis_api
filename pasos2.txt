
Paso 1 )

    En main.dart
    agregamos la propiedad debugShowCheckedModeBanner en false para quitar el banner de modo debug.


Paso 2)

    Agregamos los directorios config/theme  y config/router
    Luego el archivo config/theme/app_theme.dart y config/router/app_router.dart

 Paso 3)  en app_theme.dart

        3.1)
        import 'package:flutter/material.dart';
        class AppTheme {

          ThemeData getTheme() => ThemeData(
            useMaterial3: true,
            colorSchemeSeed: const Color(0xff2862F5)
          );
        }


        3.2) Agrego la propiedad theme en mi main.dart

        theme: AppTheme().getTheme(),

  Paso 4) instalamos el router en pubspec.yaml (https://pub.dev/packages/go_router/install)

      dependencies:
        flutter:
          sdk: flutter
        go_router: ^16.2.4

 Paso 5) Creamos el directorio /lib/presentation/screens

 Paso 6) creamos el directorio a trabajar para el ejemplo usamos /lib/presentation/screens/movies/home_screen.dart
    stl = para crear nuestro stallesswidgets


    import 'package:flutter/material.dart';

    class HomeScreen extends StatelessWidget {
      static const name = 'home-screen';

      const HomeScreen({super.key});

      @override
      Widget build(BuildContext context) {
        return Scaffold(
          body: Placeholder(),
        );
      }
    }


Paso 7 ) como sabemos que vamos a tener muchas pantallas, creamos  /screens/screens.dart para tener asi un solo archivo con todas las pantallas necesarias

        export 'movies/home_screen.dart';



Paso 8 )  Configuremos nuestro routers de navegaciÃ³n (ojo es importante validar que estamos importando desde nuestra pantalla screens.dart)

    8.1) en app_router.dart

        import 'package:go_router/go_router.dart';
        import 'package:pelis_api/presentation/screens/screens.dart';

        final appRouter = GoRouter(
          initialLocation: '/',
          routes: [GoRoute(path: '/', name: HomeScreen.name, builder: (context,state)=> HomeScreen())],
        );

    8.2 ) en main.dart configuramos el router

        return MaterialApp.router(
          routerConfig: appRouter,
          title: 'Flutter Demo',
          debugShowCheckedModeBanner: false,
          theme: AppTheme().getTheme(),

        );

Paso 9) Creamos el directorio /lib/domain
                /lib/domain/datasources
                /lib/domain/entities
                /lib/domain/repositories


Paso 10) Creamos nuestra primera entidad de ejemplo /lib/domain/entities/movie.dart

    class Movie {
      final bool adult;
      final String backdropPath;
      final List<String> genreIds;
      final int id;
      final String originalLanguage;
      final String originalTitle;
      final String overview;
      final double popularity;
      final String posterPath;
      final DateTime releaseDate;
      final String title;
      final bool video;
      final double voteAverage;
      final int voteCount;

      Movie({
        required this.adult,
        required this.backdropPath,
        required this.genreIds,
        required this.id,
        required this.originalLanguage,
        required this.originalTitle,
        required this.overview,
        required this.popularity,
        required this.posterPath,
        required this.releaseDate,
        required this.title,
        required this.video,
        required this.voteAverage,
        required this.voteCount
      });
    }



Paso 11 ) Ahora crearemos nuestra clase abstracta, para no tener que instanciarla /lib/domain/datasources/movies_datasoruce.dart


        import 'package:pelis_api/domain/entities/movie.dart';
        abstract class MoviesDatasource {
          Future<List<Movie>> getNowPlaying({int page = 1});
        }

Paso 12 ) Ahora crearemos /lib/domain/repositories/movies_repository.dart

        import 'package:pelis_api/domain/entities/movie.dart';
        abstract class MoviesRepository {
          Future<List<Movie>> getNowPlaying({int page = 1});
        }



Paso 13 )

https://www.themoviedb.org/
danielrico
123456


eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYzVkNDM2MWU2MGU0NGYzMDY5YTE4MTVmZGFjNDkxOCIsIm5iZiI6MTc1OTg1MzY0Ny4zNzEsInN1YiI6IjY4ZTUzYzRmMTUxOTM1OGFjNjI1YzBlMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.JSmF39jKicNyMyQ8LvVkh0T-qy-1Pgl1l0vfiGx_b9g

fc5d4361e60e44f3069a1815fdac4918

Paso 14)

    creamos en la raiz el archivo .env y .env.template


    THE_MOVIEDB_KEY=fc5d4361e60e44f3069a1815fdac4918

    test en postman  https://api.themoviedb.org/3/movie/550?api_key=fc5d4361e60e44f3069a1815fdac4918&language=es-MX

Paso 15)

    hay q iniciar el github

    y revisar que este el .env, el git ignore

    Agregamos al readme los pasos a seguir


Paso 16)
   16.1)
   instalaremos el paquete flutter_dotenv: ^6.0.0

   16.2)
   recordar habilitar el

flutter:
  uses-material-design: true
  assets:
   - .env

   16.3)
   Luego vamos al main.dart

    import 'package:flutter_dotenv/flutter_dotenv.dart';
    Future<void> main() async{
      await dotenv.load(fileName: '.env');
      runApp(const MyApp());
    }

    16.4)
    probamos  en presentation/screens/home_screen.dart

        import 'package:flutter_dotenv/flutter_dotenv.dart';

        class HomeScreen extends StatelessWidget {
          static const name = 'home-screen';

          const HomeScreen({super.key});

          @override
          Widget build(BuildContext context) {
            return Scaffold(
              body: Center(
                child: Text(dotenv.env['THE_MOVIEDB_KEY']?? 'No hay api KEY'),
              ),
            );
          }
        }

    16.5) MEjoramos el llamado de las variables DOT a un solo lugar entonces, Creamos el directorio config/constants/enviroment.dart


        import 'package:flutter_dotenv/flutter_dotenv.dart';

        class Enviroment {
          static String theMovieDbKey = dotenv.env['THE_MOVIEDB_KEY']?? 'No hay api KEY';
        }

    16.6 )
        En home_screen.dart probamos la nueva implementacion


        class HomeScreen extends StatelessWidget {
          static const name = 'home-screen';

          const HomeScreen({super.key});

          @override
          Widget build(BuildContext context) {
            return Scaffold(
              body: Center(
                child: Text(Enviroment.theMovieDbKey),
              ),
            );
          }
        }

17 ) Creamos el directorio infrastructure/datasources/moviedb_datasource.dart para instanciar la clase abstracta del /datasource


    instalamos le paquete DIO similar a AXIOS
    https://pub.dev/packages/dio/install


        class MoviedbDatasource extends MoviesDatasource {

          final dio = Dio(BaseOptions(
            baseUrl: 'https://api.themoviedb.org/3',
            queryParameters: {
              'api_key': Enviroment.theMovieDbKey,
              'language': 'es-MX'
            }
          ));

          @override
          Future<List<Movie>> getNowPlaying({int page = 1}) async{
            final response = await dio.get('/movie/now_playing');
            final List<Movie> movies = [];
            return [];
          }


        }

18 ) ahora vmaos a crear nuestro conversor de lo que trae el json a lo que usaremos en nuestra app
     vamos a https://app.quicktype.io/ y pegamos el json que nos responde en el postman nuestra api
        https://api.themoviedb.org/3/movie/550?api_key=fc5d4361e60e44f3069a1815fdac4918&language=es-MX
        configuramos DART, null Safety y Make All propertis final y copiamos el mapeo






19 )  Creamos el directorio /infrastructure/models/moviedb/moviedb_response.dart

    y aqui pegamos el mapeo de la pagina https://app.quicktype.io/   y comenzamos a arreglarlo para que quede funcional




19.1 )
    final Dates? dates; la ponemos opcional
    "dates": dates == null ? null : dates!.toJson(),

19.2 ) Renombramos la clase response por MovieMovieDB

       copiamos la clase y la pasamos a movie_moviedb.dart

19.3 )  eliminamos la enum, no lo usaremos

19.4 ) https://image.tmdb.org/t/p/original/


20 ) CReamos nuestro directorio infrastructure/mappers

21 ) Luego de crear nuestro mapper, nos vamos a moviedb_datasrource a culminar nuestra peticion get

22 ) Ahora vamos a crear nuestro folder infrastructure/repositories/movie_repository_impl.dart




23 )  instalamos riverpod
    https://pub.dev/packages/flutter_riverpod/install
    flutter_riverpod: ^3.0.3

    23.1 ) configuramos el main
        Future<void> main() async{
          await dotenv.load(fileName: '.env');
          runApp( const ProviderScope(child: MyApp()) );
        }

24 ) creamos el folder presentation/providers/movies/movies_repository_provider.dart

        // este repositorio es inmutable es de solo lectura, es decir listados
        final movieRepositoryProvider = Provider((ref) {
            return MoviesRepositoryImpl(MoviedbDatasource());
        });

25 ) Creamos el archivo presentation/providers/movies/movies_providers.dart




        final nowPlayingMoviesProvider = StateNotifierProvider<MoviesNotifier, List<Movie>>((ref){
          final fetchMoreMovies = ref.watch(movieRepositoryProvider).getNowPlaying;
          return MoviesNotifier(
            fetchMoreMovies: fetchMoreMovies
          );
        });


        typedef MovieCallback = Future<List<Movie>> Function({int page});


        class MoviesNotifier extends StateNotifier<List<Movie>>{
          int currentPage = 0;
          MovieCallback fetchMoreMovies;

          MoviesNotifier({
            required this.fetchMoreMovies
          }): super([]);
          Future<void> loadNextPage() async {
            currentPage++;
            final List<Movie> movies = await fetchMoreMovies(page: currentPage);
            state = [...state, ...movies];
          }
        }


  26 ) Creamos un archivo de llamados multiples para export en /presentation/providers/providers.dart


        export 'movies/movies_providers.dart';
        export 'movies/movies_repository_provider.dart';

27 ) nos vamos al home_screen para agregar nuestra implementacion GET

    extraigo a un nuevo wigets y convierto el statfull  a ConsumerStatefulWidget


        class HomeScreen extends StatelessWidget {
          static const name = 'home-screen';

          const HomeScreen({super.key});

          @override
          Widget build(BuildContext context) {
            return Scaffold(
              body: Center(
                child: _HomeView(),
              ),
            );
          }
        }


        class _HomeView extends ConsumerStatefulWidget {
          const _HomeView();

          @override
          _HomeViewState createState() => _HomeViewState();
        }

        class _HomeViewState extends ConsumerState<_HomeView> {
          @override
          void initState() {
            super.initState();
            ref.read(nowPlayingMoviesProvider.notifier).loadNextPage();
          }

          @override
          Widget build(BuildContext context) {
            final nowPlayingMovies = ref.watch(nowPlayingMoviesProvider);

            if(nowPlayingMovies.length == 0) return CircularProgressIndicator();

            return ListView.builder(itemCount:nowPlayingMovies.length, itemBuilder: (context, index){
              final movie = nowPlayingMovies[index];
              return ListTile(
                title: Text(movie.title)
              );
            });
          }
        }






